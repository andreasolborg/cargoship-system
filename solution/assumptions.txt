I think a solution to this would be that think of the ship as 6 individual 3d grids (1 grid for each section). 
We also make the assumption that a 40-feet container must be placed either directly ontop of 2 consecutive 20-feet container or directly ontop of a 40-feet container. 
- "Pillar-structure" using a stack to do this. 
    - If we need to reload the ship, we could pop from the top of this pillar and place the heavier container in a place without needing to remove every container from the ship.
- We make sure that two 20-feet containers must be placed in to consecutive grid spots in the length direction. a stack, we could pop from the top of the stack and place the container in the next available grid spot.

Functionality for the restriction of 2 consecutive 20-feet containers:
- We can implement a holder for a 20-feet container. holdingList = [] 
- When adding an arbibtrary container to the ship, we would check the size of the container and if it is a 20-feet container, we would add this to the holding list.
- If the holding list is of size 1, we would check if the next container is a 20-feet container. If it is, we would add it to the holding list and place the holdingList in the next available grid spot in the section (now taking up 2 consecutive grid spots)
- If it is not, we would place the container in the next available grid spot and clear the holding list.



########### Main ship data structure: ###########
- A ship is a list of 6 sections. Each section is a 2d grid of size length x width. Each grid spot is a stack, where the top of the stack is the uppermost container in the grid spot.
- Add container -> 
- Is ship balanced? -> implement error handling for this
- Is ship full? -> implement error handling for this


########### Container data structure: ###########
- A container is a tuple of (containerID, size, weight). Size is either 20 or 40. Weight is an integer.


########### ContainerStack data structure: ###########
- Constructor takes in a sectionID, a location-tuple of (width, length) and a maxStackHeight.
- ContainerStack weight is the sum of the weights of all the containers in the stack.
- Make ContainerStack class with custom methods for adding and removing containers. This would ensure the constraint of 2 consecutive 20-feet containers or a single 40-feet container.
    - Error handling for adding container(s) to a full stack.
- We would also need to keep track of the number of operations performed on the stack.

- Functions to implement:
    - self.containers = [] # the holding list for 20-feet containers that are waiting to be placed in the stack


    - Remove container from stack using pop -> 
        - Check if stack is empty -> if len(self.containerStack) == 0: raise error
        - Remove container from stack -> self.containerStack.pop()
        - Update stack weight -> self.stackWeight -= container.weight
        - Update number of operations -> self.numOperations += 1
- Error handling to implement:
    - Adding container to a full stack
    - Removing container from an empty stack


########### ShipSection data structure: ###########
- Make ShipSection class with constructor that takes in sectionID, width, length, and maxStackHeight. 
- We would also need to keep track of full grid spots and empty grid spots (grid spots are full if the stack is at maxStackHeight)
- We would also need to keep track of the number of operations performed on the ship.
- Keep track of section weight, update this when adding or removing containers.
    - Find lightest section -> min(self.sectionWeights)
- Empty stacks -> for w in range(width): for l in range(length): self.emptyContainerStacks.append((w, l))
    - self.full if len(self.emptyContainerStacks) == 0
- Functions:
    - Add container to section -> 
        - Find empty stack -> self.emptyContainerStacks.pop()
        - Add container to stack -> self.containerStacks[stackLocation].addContainer(container)
        - Update section weight -> self.sectionWeights[sectionID] += container.weight
        - Update number of operations -> self.numOperations += 1
    - Remove container from section ->
        - Find container stack -> self.containerStacks[stackLocation]
        - Remove container from stack -> self.containerStacks[stackLocation].removeContainer()
        - Update section weight -> self.sectionWeights[sectionID] -= container.weight
        - Update number of operations -> self.numOperations += 1    





################################## TO DO ##################################
## OVERALL


## SHIP:
    [] Implement number of operations logics
    [] Implement "find-lightest-section" function
    [] Implement "is_ship_balanced" function
        [] implement error handling for this
    [] Implement "is_ship_full" function
        [] implement error handling for this
    [] Implement "add_container" function
        [] Add to lightest section
        [] Add to lightest stack
        [] Add to lightest stack in lightest section
    [] Implement "remove_container" function
        [] Remove from heaviest section
        [] Remove from heaviest stack
        [] Remove from heaviest stack in heaviest section


## CONTAINER:
    [] Test container class
        [] Test container constructor
        [] Test container methods
    [] Remove unused methods


## CONTAINER STACK:
    [] Move the temporary holding list for 20-feet containers to the ship-section class
    [] If time:
        [] A single container in a pair can be changed such that it is more balanced
    [] 
    
    
## SHIP SECTION:
    [] Implement find lightest stack
    [] MUST BE TESTED WITH A SET OF CONTAINERS



## ERROR HANDLING:
- Implement error handling for adding container to a full stack (function)
- Implement error handling for removing container from an empty stack (function)
- Implement error handling for adding container to a full ship (function)
- Implement error handling for removing container from an empty ship (function)
- Implement error handling for adding container to a section that is full (function)
- Implement error handling for removing container from a section that is empty (function)



## Asssumptions
- A 40-feet container must be placed either directly ontop of 2 consecutive 20-feet container or directly ontop of a 40-feet container.
- 20-feet containers comes in fixed pairs. After they are "glued" together, they cannot be separated, and is treated like a single 40-feet container.



# TEST 1K EMPTY -> THEN 1K FULL -> THEN 1K EMPTY, what is the number of operations?